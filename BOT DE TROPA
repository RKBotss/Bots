



import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.Permission;
import net.dv8tion.jda.api.entities.Guild;
import net.dv8tion.jda.api.entities.Member;
import net.dv8tion.jda.api.entities.Message;
import net.dv8tion.jda.api.entities.Role;
import net.dv8tion.jda.api.entities.channel.concrete.Category;
import net.dv8tion.jda.api.entities.channel.concrete.TextChannel;
import net.dv8tion.jda.api.entities.channel.middleman.GuildChannel;
import net.dv8tion.jda.api.entities.emoji.Emoji;
import net.dv8tion.jda.api.events.channel.ChannelDeleteEvent;
import net.dv8tion.jda.api.events.interaction.ModalInteractionEvent;
import net.dv8tion.jda.api.events.interaction.component.ButtonInteractionEvent;
import net.dv8tion.jda.api.events.message.MessageReceivedEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.interactions.components.ActionRow;
import net.dv8tion.jda.api.interactions.components.ComponentInteraction;
import net.dv8tion.jda.api.interactions.components.buttons.Button;
import net.dv8tion.jda.api.interactions.components.text.TextInput;
import net.dv8tion.jda.api.interactions.components.text.TextInputStyle;
import net.dv8tion.jda.api.interactions.modals.Modal;
import org.w3c.dom.Text;

import java.awt.*;
import java.util.*;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class BotTropa extends ListenerAdapter {
    private List<String> idCanal = new ArrayList<>();
    private Map<String, String> componentsIdade = new HashMap<>();
    private Map<String, String> componentsDisponibilidade = new HashMap<>();
    private Map<String, String> componentsMotivo = new HashMap<>();
    private Map<String, String> componentsHL = new HashMap<>();
    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
    public void onMessageReceived(MessageReceivedEvent event) {
        if(event.getMessage().getContentRaw().equalsIgnoreCase("!criarteste")){
            if(event.getMember().hasPermission(Permission.ADMINISTRATOR)) {
                Emoji emoji = event.getGuild().getEmojiById("1328829986093666345");
                Button criarteste = Button.secondary("teste", "Realizar Teste").withEmoji(emoji);
                TextChannel channel = event.getGuild().getTextChannelById("1251009512081588256");
                event.getChannel().sendMessage("")
                        .setEmbeds(new EmbedBuilder()
                                .setDescription("# REALIZAR TESTE <a:1259738645598965863ezgif:1328829986093666345>"
                                        + "\n\n > ** Para Realizar o seu Teste, Basta Clicar no Botão Abaixo** "
                                        + "\n > ** e Preencher os Campos Necessários.**"
                                        + "\n\n > **  Após Isso, é só Aguardar o Resultado que Será Anunciado**"
                                        + "\n > ** no Canal: **" + channel.getAsMention())
                                .setColor(Color.decode("#ffffff"))
                                .setThumbnail("https://cdn.discordapp.com/attachments/1102285791000010833/1328836223837540383/rk_bots_logo.png?ex=678826ac&is=6786d52c&hm=5315ea7117f16d6baa6200b53f4413e721bd7ed0f64d2329678da6585169e3e8&")
                                .build()).setActionRow(criarteste)
                        .queue();
                event.getMessage().delete().queue();
            }else {
                event.getMessage().reply("")
                        .setEmbeds(new EmbedBuilder()
                                .setDescription("❌ **COMANDO RESTRITO PARA ADMINISTRADORES!**")
                                .setColor(Color.decode("#ffffff"))
                                .build())
                        .queue(message1 -> {
                            scheduler.schedule(() -> {
                                message1.delete().queue(); // Exclui a mensagem após 10 segundos
                            }, 3, TimeUnit.SECONDS);
                        });
                event.getMessage().delete().queue();
            }
        }
    }

    @Override
    public void onButtonInteraction(ButtonInteractionEvent event) {
        if(event.getComponentId().equalsIgnoreCase("teste")){
            Guild guild = event.getGuild();
            String userFirstName = event.getUser().getName();
            String interactionChannelName = "\uD83D\uDE80〡" + userFirstName;
            Category category = event.getGuild().getCategoryById("1252460495374516305");
            List<Category> categories = event.getGuild().getCategories();
            Button finalizarcanal = Button.danger("finalizarcanalteste", "❌ Excluir Canal");
            Button criarTeste = Button.success("criarteste", "✏\uFE0F Iniciar Teste");

            for (GuildChannel channel : guild.getChannels()) {
                if (channel instanceof TextChannel) {
                    TextChannel textChannel = (TextChannel) channel;
                    if (textChannel.getName().equals(interactionChannelName)) {
                        EmbedBuilder errorEmbed = new EmbedBuilder()
                                .setDescription("**❌ VOCÊ JÁ POSSUI UM TESTE ABERTO **" + textChannel.getAsMention())
                                .setColor(Color.decode("#ffffff"));
                        event.replyEmbeds(errorEmbed.build()).setEphemeral(true).queue();
                        return;
                    }
                }
            }

            guild.createTextChannel(interactionChannelName, category)
                    .addPermissionOverride(event.getMember(), EnumSet.of(Permission.VIEW_CHANNEL), EnumSet.of(Permission.MESSAGE_SEND))
                    .addPermissionOverride(guild.getPublicRole(), EnumSet.noneOf(Permission.class), EnumSet.of(Permission.VIEW_CHANNEL))
                    .setTopic(event.getUser().getId())
                    .queue(channel -> {
                        channel.sendMessage("")
                                .setEmbeds(new EmbedBuilder()
                                        .setDescription("### CRIAR UM TESTE"
                                                +"\n\n > **Caso Você Tenha Interesse em Entrar no Time, Basta Clicar no Botão Abaixo Para Criar seu Teste**\n\n"
                                                +"### EXCLUIR CANAL"
                                                +"\n\n > **Caso Você Tenha Aberto o Canal sem Querer, Basta Clicar no Botão Abaixo Para Excluir o Canal!**")
                                        .setColor(Color.decode("#ffffff"))
                                        .setImage("https://cdn.discordapp.com/attachments/1102285791000010833/1328836240551837706/banner_Neutro.png?ex=678826b0&is=6786d530&hm=127bc69d8413051c38485658d204e490b9122c80452a8c15694bcfffe6684475&")
                                        .build())
                                .addActionRow(criarTeste, finalizarcanal)
                                .queue();
                        String asMention = channel.getAsMention();

                        EmbedBuilder successEmbed = new EmbedBuilder()
                                .setDescription("**SEU CANAL FOI CRIADO COM SUCESSO **" + asMention)
                                .setColor(Color.decode("#ffffff"));
                        event.replyEmbeds(successEmbed.build()).setEphemeral(true).queue();
                        idCanal.add(event.getChannel().getId());
                        scheduler.schedule(() -> {
                            for (Category categoria : categories) {
                                if (categoria.getId().equals("1252460495374516305")) {
                                    List<TextChannel> channels = categoria.getTextChannels();
                                    for (TextChannel channel10 : channels) {
                                        if (channel10.getId().equals(channel.getId())) {
                                            channel.delete().queue();

                                            event.getMember().getUser().openPrivateChannel().queue((channel1 -> {
                                                channel1.sendMessage("").setEmbeds(new EmbedBuilder()
                                                        .setDescription("## FINALIZAMOS SEU TESTE"
                                                                + "\n > **Você Excedeu o seu Limite de 5 minutos Para Finalizar o Teste!**"
                                                                + "\n > ** Por Conta Disso, Encerramos seu Teste Automaticamente**")
                                                        .setColor(Color.decode("#ffffff"))
                                                        .build()).queue();
                                            }));
                                        }
                                    }
                                }
                            }
                        }, 5, TimeUnit.MINUTES);
                    });
        }

        if(event.getComponentId().equalsIgnoreCase("finalizarcanalteste")){
            event.getChannel().delete().queue();
        }

        if(event.getComponentId().equalsIgnoreCase("criarteste")){
            event.getChannel().getHistory().retrievePast(10).queue(messages1 -> {
                event.getChannel().purgeMessages(messages1);
                Button idade = Button.secondary("idadeteste", "Idade");
                event.getChannel().sendMessage("").setEmbeds(new EmbedBuilder()
                        .setDescription("**DIGITE QUAL A SUA IDADE**")
                        .setColor(Color.decode("#ffffff"))
                        .build()).setActionRow(idade).queue();
            });
        }

        if(event.getComponentId().equalsIgnoreCase("idadeteste")){
            Modal modal = Modal.create("idadeteste", "IDADE")
                    .addActionRow(
                            TextInput.create("idadeteste", "Digite A sua Idade", TextInputStyle.SHORT)
                                    .setRequiredRange(1, 2)
                                    .build()
                    )
                    .build();
            event.replyModal(modal).queue();
        }

        if(event.getComponentId().equalsIgnoreCase("disponibilidadeteste")){
            Modal modal = Modal.create("disponibilidadeteste", "DISPONIBILIDADE")
                    .addActionRow(
                            TextInput.create("disponibilidadeteste", "Digite A sua Disponibilidade", TextInputStyle.SHORT)
                                    .setRequiredRange(1, 100)
                                    .build()
                    )
                    .build();
            event.replyModal(modal).queue();
        }

        if(event.getComponentId().equalsIgnoreCase("motivoteste")){
            Modal modal = Modal.create("motivoteste", "MOTIVO")
                    .addActionRow(
                            TextInput.create("motivoteste", "Digite O PORQUE VOCÊ DESEJA ENTRAR NO TIME", TextInputStyle.PARAGRAPH)
                                    .setRequiredRange(1, 500)
                                    .build()
                    )
                    .build();
            event.replyModal(modal).queue();

        }

        if(event.getComponentId().equalsIgnoreCase("hlteste")){
            Modal modal = Modal.create("hlteste", "HL")
                    .addActionRow(
                            TextInput.create("hlteste", "Mande o Link Do Seu HL", TextInputStyle.SHORT)
                                    .setRequiredRange(1, 500)
                                    .build()
                    )
                    .build();
            event.replyModal(modal).queue();
        }

        if (event.getComponentId().equalsIgnoreCase("enviarteste")){
            Button aprovar = Button.success("aprovar", "✅ Aprovar");
            Button reprovar = Button.danger("reprovar", "❌ Reprovar");
            Member member = event.getInteraction().getMember();
            event.getChannel().getHistory().retrievePast(10).queue(messages1 -> {
                event.getChannel().purgeMessages(messages1);
                TextChannel channel = event.getGuild().getTextChannelById("1285322143025856562");
                channel.sendMessage("# HL - TESTE" + "\n"
                                + "* *NOME:* " + "**" + member.getAsMention() + " [ " + member.getEffectiveName() + " / " + member.getId() + " ]" + "**"
                                + "\n* *IDADE:* " + "**" + componentsIdade.get(event.getChannelId()) + " anos **"
                                + "\n* *DISPONIBILIDADE:* " + "**" + componentsDisponibilidade.get(event.getChannelId()) + "**"
                                + "\n* *MOTIVO:* " + "**" + componentsMotivo.get(event.getChannelId()) + "**"
                                + "\n* *HIGHLIGHT:* " + componentsHL.get(event.getChannelId()) + "\n" + "@everyone")
                        .setActionRow(aprovar, reprovar)
                        .queue();

                event.getChannel().sendMessage("").setEmbeds(new EmbedBuilder()
                        .setDescription("**TESTE ENVIADO COM SUCESSO**"
                                + "\n\n *O Canal se Apagará Automaticamente em 5 Segundos*")
                        .setColor(Color.decode("#ffffff"))
                        .build()).queue(channel1 -> {
                    scheduler.schedule(() -> {
                        event.getChannel().delete().queue();
                    }, 5, TimeUnit.SECONDS);
                });

                TextChannel channel2 = event.getGuild().getTextChannelById("1251009512081588256");
                event.getMember().getUser().openPrivateChannel().queue((channel1 -> {
                    channel1.sendMessage("").setEmbeds(new EmbedBuilder()
                            .setDescription("## TESTE FINALIZADO \uD83D\uDE80"
                                    + "\n > **Seu Teste Foi Finalizado com Sucesso!**"
                                    + "\n > **Fique Atento(a) no Resultado em: **"
                                    + "\n" + channel2.getAsMention())
                            .setColor(Color.decode("#ffffff"))
                            .build()).queue();
                }));
            });
        }

        if(event.getComponentId().equalsIgnoreCase("editarteste")){
            event.reply("").queue(message -> message.deleteOriginal().queue());
            Button editaridade = Button.secondary("editaridade", "Editar Idade");
            Button editardisponibilidade = Button.secondary("editardisponibilidade", "Editar Disponibilidade");
            Button editarmotivo = Button.secondary("editarmotivo", "Editar Motivo");
            Button editarhl = Button.secondary("editarhl", "Editar HL");
            event.getInteraction().getMessage().delete().queue();
            event.getChannel().sendMessage("").setEmbeds(new EmbedBuilder()
                    .setDescription("**INFORME O QUE VOCÊ DESEJA ALTERAR!**")
                    .setColor(Color.decode("#ffffff"))
                    .build()).setActionRow(editaridade, editardisponibilidade, editarmotivo, editarhl).queue();

        }


        if(event.getComponentId().equalsIgnoreCase("editaridade")){
            Modal modal = Modal.create("editaridade", "Editar Idade")
                    .addActionRow(
                            TextInput.create("editaridade", "Digite Sua Idade", TextInputStyle.SHORT)
                                    .setRequiredRange(1, 2)
                                    .build()
                    )
                    .build();
            event.replyModal(modal).queue();
        }

        if(event.getComponentId().equalsIgnoreCase("editardisponibilidade")){
            Modal modal = Modal.create("editardisponibilidade", "Editar Disponibilidade")
                    .addActionRow(
                            TextInput.create("editardisponibilidade", "Digite Sua Disponibilidade", TextInputStyle.SHORT)
                                    .setRequiredRange(1, 500)
                                    .build()
                    )
                    .build();
            event.replyModal(modal).queue();
        }

        if(event.getComponentId().equalsIgnoreCase("editarmotivo")){
            Modal modal = Modal.create("editarmotivo", "Editar Motivo")
                    .addActionRow(
                            TextInput.create("editarmotivo", "Digite O PORQUE VOCÊ DESEJA ENTRAR NO TIME", TextInputStyle.PARAGRAPH)
                                    .setRequiredRange(1, 500)
                                    .build()
                    )
                    .build();
            event.replyModal(modal).queue();
        }

        if(event.getComponentId().equalsIgnoreCase("editarhl")){
            Modal modal = Modal.create("editarhl", "Editar HIGHLIGHT")
                    .addActionRow(
                            TextInput.create("editarhl", "Mande o Seu Highlight", TextInputStyle.SHORT)
                                    .setRequiredRange(1, 500)
                                    .build()
                    )
                    .build();
            event.replyModal(modal).queue();
        }

        if(event.getComponentId().equalsIgnoreCase("aprovar")){
            if (event.getMember().hasPermission(Permission.ADMINISTRATOR)) {
                Button aprovar = Button.success("aprovar", "✅ Aprovar").asDisabled();
                Button reprovar = Button.danger("reprovar", "❌ Reprovar").asDisabled();
                event.getMessage().editMessageComponents(ActionRow.of(aprovar, reprovar)).queue();

                TextChannel channel = event.getGuild().getTextChannelById("1251009512081588256");
                Role role = event.getGuild().getRoleById("1251030660500684871");
                String idusuario = null;
                String conteudoMensagem = event.getInteraction().getMessage().getContentRaw();
                String[] linhas = conteudoMensagem.split("\n");
                for (int i = 0;i < linhas.length; i++){
                    if (linhas[i].startsWith("N", 3)){
                        String[] parts = linhas[i].split("/");
                        idusuario = parts[1].replaceAll("[^\\d]", "");
                        System.out.println(idusuario);
                    }
                }
                Member membro = event.getGuild().getMemberById(idusuario);
                event.getGuild().addRoleToMember(membro, role).queue(
                        success -> {
                            channel.sendMessage("").setEmbeds(new EmbedBuilder()
                                    .setDescription("## MEMBRO APROVADO <a:Nexus_Check:1328881579547820105>" + "\n"
                                            + "### __MEMBRO:__" + "\n"
                                            + "<:setaRKBots:1329103747720151043> " + membro.getAsMention() + " `[ " + membro.getUser().getName() + " / " + membro.getId() + " ]`\n\n"
                                            + "-# <:Logoredonda:1328847788141973544> **Aprovado por: **" + event.getInteraction().getMember().getAsMention())
                                    .setColor(Color.decode("#ffffff"))
                                    .setThumbnail("https://cdn.discordapp.com/attachments/1102285791000010833/1328836223837540383/rk_bots_logo.png?ex=678826ac&is=6786d52c&hm=5315ea7117f16d6baa6200b53f4413e721bd7ed0f64d2329678da6585169e3e8&")
                                    .build()).queue();

                            membro.getUser().openPrivateChannel().queue((channel1 -> {
                                channel1.sendMessage("").setEmbeds(new EmbedBuilder()
                                        .setDescription("## RESULTADO ANUNCIADO <a:1259738645598965863ezgif:1328829986093666345>"
                                                + "\n > **Confirá o resultado do seu teste no canal:** \n"
                                                + channel.getAsMention())
                                        .setColor(Color.decode("#ffffff"))
                                        .build()).queue();
                            }));
                        });
                    event.reply("").setEmbeds(new EmbedBuilder()
                            .setDescription("**✅ MEMBRO APROVADO COM SUCESSO!**")
                            .setColor(Color.decode("#ffffff"))
                            .build()).setEphemeral(true).queue();
            }else {
                event.reply("").setEmbeds(new EmbedBuilder()
                        .setDescription("**❌ COMANDO RESTRITO PARA ADMINISTRADORES!**")
                        .setColor(Color.decode("#ffffff"))
                        .build()).setEphemeral(true).queue();
            }

        }

        if(event.getComponentId().equalsIgnoreCase("reprovar")){
            if (event.getMember().hasPermission(Permission.ADMINISTRATOR)) {
                Modal modal = Modal.create("reprovar", "Reprovar")
                        .addActionRow(
                                TextInput.create("motivoreprovar", "Motivo", TextInputStyle.PARAGRAPH)
                                        .setRequiredRange(1, 500)
                                        .build()
                        )
                        .build();
                event.replyModal(modal).queue();
            }else {
                event.reply("").setEmbeds(new EmbedBuilder()
                        .setDescription("**❌ COMANDO RESTRITO PARA ADMINISTRADORES!**")
                        .setColor(Color.decode("#ffffff"))
                        .build()).setEphemeral(true).queue();
            }
        }



    }

    @Override
    public void onModalInteraction(ModalInteractionEvent event) {

        if(event.getModalId().equalsIgnoreCase("reprovar")){
            Button aprovar = Button.success("aprovar", "✅ Aprovar").asDisabled();
            Button reprovar = Button.danger("reprovar", "❌ Reprovar").asDisabled();
            event.getMessage().editMessageComponents(ActionRow.of(aprovar, reprovar)).queue();

            String motivo = (event.getValue("motivoreprovar").getAsString());
            TextChannel channel = event.getGuild().getTextChannelById("1251009512081588256");
            String idusuario = null;
            String conteudoMensagem = event.getInteraction().getMessage().getContentRaw();
            String[] linhas = conteudoMensagem.split("\n");
            for (int i = 0;i < linhas.length; i++){
                if (linhas[i].startsWith("N", 3)){
                    String[] parts = linhas[i].split("/");
                    idusuario = parts[1].replaceAll("[^\\d]", "");
                    System.out.println(idusuario);
                }
            }
            Member membro = event.getGuild().getMemberById(idusuario);
            channel.sendMessage("").setEmbeds(new EmbedBuilder()
                    .setDescription("## MEMBRO REPROVADO <a:nexus_negar:1328881650431561830>" + "\n"
                            +"### __MEMBRO:__" + "\n"
                            +"<:setaRKBots:1329103747720151043> " + membro.getAsMention() + " `[ " + membro.getUser().getName() + " / " + membro.getId() + " ]`" + "\n"
                            +"### __MOTIVO:__" + "\n"
                            +"<:setaRKBots:1329103747720151043> `" + motivo + "` \n\n"
                            + "-# <:Logoredonda:1328847788141973544> **Reprovado por: **" + event.getInteraction().getMember().getAsMention())
                    .setColor(Color.decode("#ffffff"))
                    .setThumbnail("https://cdn.discordapp.com/attachments/1102285791000010833/1328836223837540383/rk_bots_logo.png?ex=678826ac&is=6786d52c&hm=5315ea7117f16d6baa6200b53f4413e721bd7ed0f64d2329678da6585169e3e8&")
                    .build()).queue();
            membro.getUser().openPrivateChannel().queue((channel1 -> {
                channel1.sendMessage("").setEmbeds(new EmbedBuilder()
                        .setDescription("## RESULTADO ANUNCIADO <a:1259738645598965863ezgif:1328829986093666345>"
                                + "\n > **Confirá o resultado do seu teste no canal:** \n"
                                + channel.getAsMention())
                        .setColor(Color.decode("#ffffff"))
                        .build()).queue();
            }));

            event.reply("").setEmbeds(new EmbedBuilder()
                    .setDescription("**✅ MEMBRO REPROVADO COM SUCESSO!**")
                    .setColor(Color.decode("#ffffff"))
                    .build()).setEphemeral(true).queue();

        }

        if (event.getModalId().equalsIgnoreCase("idadeteste")){
            String idade = (event.getValue("idadeteste").getAsString());
            componentsIdade.put(event.getChannelId(), idade);
            if (!idade.matches("\\d+")) { // Verifica se contém apenas dígitos
                event.reply("").setEmbeds(new EmbedBuilder()
                        .setDescription("**❌ DIGITE A SUA IDADE, APENAS NÚMEROS!**")
                        .setColor(Color.decode("#ffffff"))
                        .build()).setEphemeral(true).queue();
                return;
            } else{
                event.reply("").queue(message -> {
                    message.deleteOriginal().queue();
                });
            }
            event.getChannel().getHistory().retrievePast(10).queue(messages1 -> {
                event.getChannel().purgeMessages(messages1);
                Member member = event.getInteraction().getMember();
                event.getChannel().sendMessage("*RESULTADO DE COMO ESTÁ FICANDO:*" + "\n"
                                + "# HL - TESTE" + "\n"
                                + "* *NOME:* " + "**" + member.getAsMention() + " [" + member.getEffectiveName() + " / " + member.getId() + "]" + "**"
                                + "\n* *IDADE:* " + "**" + idade + " anos **")
                        .queue();

                Button disponibilidade = Button.secondary("disponibilidadeteste", "Disponibilidade");
                event.getChannel().sendMessage("").setEmbeds(new EmbedBuilder()
                        .setDescription("**DIGITE QUAIS HORARIOS VOCÊ ESTARIA DISPONÍVEL**")
                        .setColor(Color.decode("#ffffff"))
                        .build()).setActionRow(disponibilidade).queue();
            });
        }

        if(event.getModalId().equalsIgnoreCase("disponibilidadeteste")){
            String disponibilidade = (event.getValue("disponibilidadeteste").getAsString());
            componentsDisponibilidade.put(event.getChannelId(), disponibilidade);
            event.reply("").queue(message -> message.deleteOriginal().queue());
            event.getChannel().getHistory().retrievePast(10).queue(messages1 -> {
                event.getChannel().purgeMessages(messages1);
                Member member = event.getInteraction().getMember();
                event.getChannel().sendMessage("*RESULTADO DE COMO ESTÁ FICANDO:*" + "\n"
                                + "# HL - TESTE" + "\n"
                                + "* *NOME:* " + "**" + member.getAsMention() + " [" + member.getEffectiveName() + " / " + member.getId() + "]" + "**"
                                + "\n* *IDADE:* " + "**" + componentsIdade.get(event.getChannelId()) + " anos **"
                                + "\n* *DISPONIBILIDADE:* " + "**" + disponibilidade + "**")
                        .queue( );

                Button motivo = Button.secondary("motivoteste", "Motivo");
                event.getChannel().sendMessage("").setEmbeds(new EmbedBuilder()
                        .setDescription("**DIGITE O MOTIVO PELO QUAL VOCÊ DESEJA ENTRAR PARA O TIME**")
                        .setColor(Color.decode("#ffffff"))
                        .build()).setActionRow(motivo).queue();
            });
        }

        if(event.getModalId().equalsIgnoreCase("motivoteste")){
            String motivo = (event.getValue("motivoteste").getAsString());
            componentsMotivo.put(event.getChannelId(), motivo);
            event.reply("").queue(message -> message.deleteOriginal().queue());
            event.getChannel().getHistory().retrievePast(10).queue(messages1 -> {
                event.getChannel().purgeMessages(messages1);
                Member member = event.getInteraction().getMember();
                event.getChannel().sendMessage("*RESULTADO DE COMO ESTÁ FICANDO:*" + "\n"
                                + "# HL - TESTE" + "\n"
                                + "* *NOME:* " + "**" + member.getAsMention() + " [" + member.getEffectiveName() + " / " + member.getId() + "]" + "**"
                                + "\n* *IDADE:* " + "**" + componentsIdade.get(event.getChannelId()) + " anos **"
                                + "\n* *DISPONIBILIDADE:* " + "**" + componentsDisponibilidade.get(event.getChannelId()) + "**"
                                + "\n* *MOTIVO:* " + "**" + motivo + "**")
                        .queue();

                Button hl = Button.secondary("hlteste", "HIGHLIGHT");
                event.getChannel().sendMessage("").setEmbeds(new EmbedBuilder()
                        .setDescription("**MANDE O LINK DO SEU HIGHLIGHT (HL)**")
                        .setColor(Color.decode("#ffffff"))
                        .build()).setActionRow(hl).queue();
            });
        }

        if(event.getModalId().equalsIgnoreCase("hlteste")){
            String hl = (event.getValue("hlteste").getAsString());
            componentsHL.put(event.getChannelId(), hl);
            event.reply("").queue(message -> message.deleteOriginal().queue());
            event.getChannel().getHistory().retrievePast(10).queue(messages1 -> {
                event.getChannel().purgeMessages(messages1);
                Member member = event.getInteraction().getMember();
                event.getChannel().sendMessage("*RESULTADO DE COMO ESTÁ FICANDO:*" + "\n"
                                + "# HL - TESTE" + "\n"
                                + "* *NOME:* " + "**" + member.getAsMention() + " [" + member.getEffectiveName() + " / " + member.getId() + "]" + "**"
                                + "\n* *IDADE:* " + "**" + componentsIdade.get(event.getChannelId()) + " anos **"
                                + "\n* *DISPONIBILIDADE:* " + "**" + componentsDisponibilidade.get(event.getChannelId()) + "**"
                                + "\n* *MOTIVO:* " + "**" + componentsMotivo.get(event.getChannelId()) + "**"
                                + "\n* *HIGHLIGHT:* " + hl)
                        .queue();

                Button enviar = Button.success("enviarteste", "Enviar");
                Button editar = Button.secondary("editarteste", "Editar");
                event.getChannel().sendMessage("").setEmbeds(new EmbedBuilder()
                        .setDescription("**TESTE FINALIZADO**"
                                + "\n\n > **Para Enviar o Teste, Basta Clicar no Botão \"Enviar\"**"
                                + "\n\n > **Caso Ainda Queira Realizar Alterações no Teste,**"
                                + "\n > **Clique no Botão \"Editar\"**")
                        .setColor(Color.decode("#ffffff"))
                        .build()).setActionRow(enviar, editar).queue();
            });
        }


        if(event.getModalId().equalsIgnoreCase("editaridade")){
            String editaridade = (event.getValue("editaridade").getAsString());
            componentsIdade.put(event.getChannelId(), editaridade);
            if (!editaridade.matches("\\d+")) { // Verifica se contém apenas dígitos
                event.reply("").setEmbeds(new EmbedBuilder()
                        .setDescription("**❌ DIGITE A SUA IDADE, APENAS NÚMEROS!**")
                        .setColor(Color.decode("#ffffff"))
                        .build()).setEphemeral(true).queue();
                return;
            } else{
                event.reply("").queue(message -> message.deleteOriginal().queue());
            }
            event.getChannel().getHistory().retrievePast(10).queue(messages1 -> {
                event.getChannel().purgeMessages(messages1);
                Member member = event.getInteraction().getMember();
                event.getChannel().sendMessage("*RESULTADO DE COMO ESTÁ FICANDO:*" + "\n"
                        + "# HL - TESTE" + "\n"
                        + "* *NOME:* " + "**" + member.getAsMention() + " [" + member.getEffectiveName() + " / " + member.getId() + "]" + "**"
                        + "\n* *IDADE:* " + "**" + componentsIdade.get(event.getChannelId()) + " anos **"
                        + "\n* *DISPONIBILIDADE:* " + "**" + componentsDisponibilidade.get(event.getChannelId()) + "**"
                        + "\n* *MOTIVO:* " + "**" + componentsMotivo.get(event.getChannelId()) + "**"
                        + "\n* *HIGHLIGHT:* " + componentsHL.get(event.getChannelId())).queue();

                Button enviar = Button.success("enviarteste", "Enviar");
                Button editar = Button.secondary("editarteste", "Editar");
                event.getChannel().sendMessage("").setEmbeds(new EmbedBuilder()
                        .setDescription("**TESTE FINALIZADO**"
                                + "\n\n > **Para Enviar o Teste, Basta Clicar no Botão \"Enviar\"**"
                                + "\n\n > **Caso Ainda Queira Realizar Alterações no Teste,**"
                                + "\n > **Clique no Botão \"Editar\"**")
                        .setColor(Color.decode("#ffffff"))
                        .build()).setActionRow(enviar, editar).queue();
            });
        }

        if(event.getModalId().equalsIgnoreCase("editardisponibilidade")){
            String editardisponibilidade = (event.getValue("editardisponibilidade").getAsString());
            componentsDisponibilidade.put(event.getChannelId(), editardisponibilidade);
            event.reply("").queue(message -> message.deleteOriginal().queue());
            event.getChannel().getHistory().retrievePast(10).queue(messages1 -> {
                event.getChannel().purgeMessages(messages1);
                Member member = event.getInteraction().getMember();
                event.getChannel().sendMessage("*RESULTADO DE COMO ESTÁ FICANDO:*" + "\n"
                        + "# HL - TESTE" + "\n"
                        + "* *NOME:* " + "**" + member.getAsMention() + " [" + member.getEffectiveName() + " / " + member.getId() + "]" + "**"
                        + "\n* *IDADE:* " + "**" + componentsIdade.get(event.getChannelId()) + " anos **"
                        + "\n* *DISPONIBILIDADE:* " + "**" + componentsDisponibilidade.get(event.getChannelId()) + "**"
                        + "\n* *MOTIVO:* " + "**" + componentsMotivo.get(event.getChannelId()) + "**"
                        + "\n* *HIGHLIGHT:* " + componentsHL.get(event.getChannelId())).queue();

                Button enviar = Button.success("enviarteste", "Enviar");
                Button editar = Button.secondary("editarteste", "Editar");
                event.getChannel().sendMessage("").setEmbeds(new EmbedBuilder()
                        .setDescription("**TESTE FINALIZADO**"
                                + "\n\n > **Para Enviar o Teste, Basta Clicar no Botão \"Enviar\"**"
                                + "\n\n > **Caso Ainda Queira Realizar Alterações no Teste,**"
                                + "\n > **Clique no Botão \"Editar\"**")
                        .setColor(Color.decode("#ffffff"))
                        .build()).setActionRow(enviar, editar).queue();
            });
        }

        if(event.getModalId().equalsIgnoreCase("editarmotivo")){
            String editarmotivo = (event.getValue("editarmotivo").getAsString());
            componentsMotivo.put(event.getChannelId(), editarmotivo);
            event.reply("").queue(message -> message.deleteOriginal().queue());
            event.getChannel().getHistory().retrievePast(10).queue(messages1 -> {
                event.getChannel().purgeMessages(messages1);
                Member member = event.getInteraction().getMember();
                event.getChannel().sendMessage("*RESULTADO DE COMO ESTÁ FICANDO:*" + "\n"
                        + "# HL - TESTE" + "\n"
                        + "* *NOME:* " + "**" + member.getAsMention() + " [" + member.getEffectiveName() + " / " + member.getId() + "]" + "**"
                        + "\n* *IDADE:* " + "**" + componentsIdade.get(event.getChannelId()) + " anos **"
                        + "\n* *DISPONIBILIDADE:* " + "**" + componentsDisponibilidade.get(event.getChannelId()) + "**"
                        + "\n* *MOTIVO:* " + "**" + componentsMotivo.get(event.getChannelId()) + "**"
                        + "\n* *HIGHLIGHT:* " + componentsHL.get(event.getChannelId())).queue();

                Button enviar = Button.success("enviarteste", "Enviar");
                Button editar = Button.secondary("editarteste", "Editar");
                event.getChannel().sendMessage("").setEmbeds(new EmbedBuilder()
                        .setDescription("**TESTE FINALIZADO**"
                                + "\n\n > **Para Enviar o Teste, Basta Clicar no Botão \"Enviar\"**"
                                + "\n\n > **Caso Ainda Queira Realizar Alterações no Teste,**"
                                + "\n > **Clique no Botão \"Editar\"**")
                        .setColor(Color.decode("#ffffff"))
                        .build()).setActionRow(enviar, editar).queue();
            });
        }

        if(event.getModalId().equalsIgnoreCase("editarhl")){
            String editarhl = (event.getValue("editarhl").getAsString());
            componentsHL.put(event.getChannelId(), editarhl);
            event.reply("").queue(message -> message.deleteOriginal().queue());
            event.getChannel().getHistory().retrievePast(10).queue(messages1 -> {
                event.getChannel().purgeMessages(messages1);
                Member member = event.getInteraction().getMember();
                event.getChannel().sendMessage("*RESULTADO DE COMO ESTÁ FICANDO:*" + "\n"
                        + "# HL - TESTE" + "\n"
                        + "* *NOME:* " + "**" + member.getAsMention() + " [" + member.getEffectiveName() + " / " + member.getId() + "]" + "**"
                        + "\n* *IDADE:* " + "**" + componentsIdade.get(event.getChannelId()) + " anos **"
                        + "\n* *DISPONIBILIDADE:* " + "**" + componentsDisponibilidade.get(event.getChannelId()) + "**"
                        + "\n* *MOTIVO:* " + "**" + componentsMotivo.get(event.getChannelId()) + "**"
                        + "\n* *HIGHLIGHT:* " + componentsHL.get(event.getChannelId())).queue();

                Button enviar = Button.success("enviarteste", "Enviar");
                Button editar = Button.secondary("editarteste", "Editar");
                event.getChannel().sendMessage("").setEmbeds(new EmbedBuilder()
                        .setDescription("**TESTE FINALIZADO**"
                                + "\n\n > **Para Enviar o Teste, Basta Clicar no Botão \"Enviar\"**"
                                + "\n\n > **Caso Ainda Queira Realizar Alterações no Teste,**"
                                + "\n > **Clique no Botão \"Editar\"**")
                        .setColor(Color.decode("#ffffff"))
                        .build()).setActionRow(enviar, editar).queue();
            });
        }

    }

    @Override
    public void onChannelDelete(ChannelDeleteEvent event) {
        if(idCanal.contains(event.getChannel().getId())) {
            componentsIdade.remove(event.getChannel().getId());
            componentsHL.remove(event.getChannel().getId());
            componentsDisponibilidade.remove(event.getChannel().getId());
            componentsMotivo.remove(event.getChannel().getId());
            idCanal.remove(event.getChannel().getId());
        }
    }
}
